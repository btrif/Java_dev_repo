Comparing Composition and Inheritance

It is easier to change the class implementing composition than inheritance.
The change of a superclass impacts the inheritance hierarchy to subclasses.
You can't add to a subclass a method with the same signature but a different return type
as a method inherited from a superclass. Composition, on the other hand,
allows you to change the interface of a front-end class without affecting back-end classes.
Composition is dynamic binding (run-time binding) while Inheritance is static binding (compile time binding)

It is easier to add new subclasses (inheritance) than it is to add new front-end classes (composition)
because inheritance comes with polymorphism.
If you have a bit of code that relies only on a superclass interface,
that code can work with a new subclass without change.
This is not true of composition unless you use composition with interfaces.

Used together, composition and interfaces make a very powerful design tool.
With both composition and inheritance, changing the implementation (not the interface) of any class is easy.
The ripple effect of implementation changes remains inside the same class.

Don't use inheritance just to get code reuse If all you really want is to reuse code
and there is no is-a relationship in sight, use composition.
Don't use inheritance just to get at polymorphism If all you really want is a polymorphism,
but there is no natural is-a relationship, use composition with interfaces.

== Summary

IS-A relationship based on Inheritance, which can be of two types Class Inheritance or Interface Inheritance.
Has-a relationship is composition relationship which is a productive way of code reuse.